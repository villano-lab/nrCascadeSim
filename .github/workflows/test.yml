name: test

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rootdist: [6.20.00, 6.24.06]
        os: [macos-10.15, macos-11, ubuntu-18, ubuntu-16, ubuntu-20]
        exclude: 
          - os: macos-11
            rootdist: 6.20.00
          - os: ubuntu-20
            rootdist: 6.20.00
    steps:
      - name: "Set env for MacOS 10 ROOT 6.20"
        if: (matrix.os == 'macos-10.15') && (matrix.rootdist == 6.20.00)
        env: 
          ROOTDIST: "root_v6.20.00.macosx64-10.15-clang110.tar.gz"
          BUILDLINE: 2
        run: echo $ROOTDIST
      - name: "Set env for MacOS 10 ROOT 6.24"
        if: (matrix.os == 'macos-10.15') && (matrix.rootdist == 6.24.06)
        env:
          ROOTDIST: "root_v6.20.00.macosx64-10.15-clang110.tar.gz"
          BUILDLINE: 472
        run: echo $ROOTDIST
      - name: "Set env for MacOS 11 ROOT 6.24"
        if: (matrix.os == 'macos-11') && (matrix.rootdist == 6.24.06)
        env:
          ROOTDIST: "root_v6.24.06.macos-11-x86_64-clang120.tar.gz"
          BUILDLINE: 539
        run: echo $ROOTDIST
      - name: "Set env for Ubuntu 16 ROOT 6.20"
        if: (matrix.os == 'ubuntu-16') && (matrix.rootdist == 6.20.00)
        env:
          ROOTDIST: "root_v6.20.00.Linux-ubuntu16-x86_64-gcc5.4.tar.gz"
          BUILDLINE: 203
        run: echo $ROOTDIST
      - name: "Set env for Ubuntu 16 ROOT 6.24"
        if: (matrix.os == 'ubuntu-16') && (matrix.rootdist == 6.24.06)
        env:
          ROOTDIST: "root_v6.24.06.Linux-ubuntu16-x86_64-gcc5.4.tar.gz"
          BUILDLINE: 606
        run: echo $ROOTDIST
      - name: "Set env for Ubuntu 18 ROOT 6.20"
        if: (matrix.os == 'ubuntu-18') && (matrix.rootdist == 6.20.00)
        env: 
          ROOTDIST: "root_v6.20.00.Linux-ubuntu18-x86_64-gcc7.4.tar.gz"
          BUILDLINE: 270
        run: echo $ROOTDIST
      - name: "Set env for Ubuntu 18 ROOT 6.24"
        if: (matrix.os == 'ubuntu-18') && (matrix.rootdist == 6.24.06)
        env:
          ROOTDIST: "root_v6.24.06.Linux-ubuntu18-x86_64-gcc7.5.tar.gz"
          BUILDLINE: 573
        run: echo $ROOTDIST
      - name: "Set env for Ubuntu 20 ROOT 6.24"
        if: (matrix.os == 'ubuntu-20') && (matrix.rootdist == 6.24.06)
        env:
          ROOTDIST: "root_v6.24.06.Linux-ubuntu20-x86_64-gcc9.3.tar.gz"
          BUILDLINE: 740
        run: echo $ROOTIDST
      - name: run tests
        run: |
          pwd
          sudo chmod 777 .github/install.sh
          source .github/install.sh

          echo "installing..."
          echo $ROOTDIST
          echo "wget command..."
          echo "wget https://root.cern/download/"$ROOTDIST
          wget https://root.cern/download/$ROOTDIST
          tar -xzf $ROOTDIST
          source root/bin/thisroot.sh

          #install and set up lcov

          wget http://downloads.sourceforge.net/ltp/lcov-1.14.tar.gz
          tar -zxvf lcov-1.14.tar.gz
          cd lcov-1.14
          sudo make install
          cd ../
          lcov --directory ./ --zerocounters

          sudo chmod 777 tests/test_realizeCascades.sh
          sudo chmod 777 get_checksums.sh

          mkdir ~/build/nrCascadeSim_build
          cd ~/build/nrCascadeSim_build

          #make repository code (my code)
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DUSE_GCOV=ON ~/build/villano-lab/nrCascadeSim
          make
          sudo make install
          make tests
          #Send tests to directory they were written to be run from.
          mv readLevelfile realizeAndSave printIsotopeInfo fetchYieldModel ~/build/villano-lab/nrCascadeSim/tests/bin
          cd ~/build/villano-lab/nrCascadeSim/

          #activate conda environment
          source activate piptest

          #test help functions
          realizeCascades --help
          regexPlayground --help

          #do the tests
          cd tests
          ./test_realizeCascades.sh
          bash test_examples.sh
          regexPlayground
          realizeCascades -n 1 -o "verbosetest.root" ../levelfiles/allge_ngam_WSlow.txt

          #need conda environment
          cd ../example-usecase
          pytest

          #Upload coverage before relevant data is removed.
          cd ~/build/villano-lab/nrCascadeSim
          source ~/build/villano-lab/nrCascadeSim/.github/uploadtocodecov.sh

          #clean up
          cd ~/build/nrCascadeSim_build
          make clean
          sudo make uninstall
