version: 2
jobs:
  setup:
    environment:
      - TZ: "/usr/share/zoneinfo/America/Denver"
    steps:
      - run:
          name: Test if the user has defined the repository name
          command: apk add --no-cache pigz python3
  build:
    environment:
      - TZ: "/usr/share/zoneinfo/America/Denver"
    working_directory: /tmp/src
    resource_class: medium
    #matrix: 
     # include:
      os: macos
      osx_image: xcode13.1 
      environment:  ROOTDIST="root_v6.24.06.macos-11.5-x86_64-clang120.tar.gz"; BUILDLINE=539
      docker.image: generic 
      python: 3.7
     #   - docker: 
      #      image: ubuntu/xenial
       #   environment:  ROOTDIST="root_v6.20.00.Linux-ubuntu16-x86_64-gcc5.4.tar.gz"; BUILDLINE=203
        #  docker.image: python
         # python: 3.7
        #- docker:
         #   image: ubuntu/bionic
          #environment:  ROOTDIST="root_v6.20.00.Linux-ubuntu18-x86_64-gcc7.4.tar.gz"; BUILDLINE=270
          #docker.image: python
          #python: 3.7
        #- docker:
         #   image: ubuntu/xenial
          #environment:  ROOTDIST="root_v6.24.06.Linux-ubuntu16-x86_64-gcc5.4.tar.gz"; BUILDLINE=606; UPLOAD_COVERAGE="true"
          #docker.image: python
          #python: 3.7
        #- matrix:
         #   image: ubuntu/bionic
          #environment:  ROOTDIST="root_v6.24.06.Linux-ubuntu18-x86_64-gcc7.5.tar.gz"; BUILDLINE=673
          #docker.image: python
          #python: 3.7

  test:
    steps:
      - run:
        name: install
        command: |
          pwd
          sudo chmod 777 .github/install.sh
          source .github/install.sh
        
          echo "installing..."
          echo $ROOTDIST
          echo "wget command..." 
          echo "wget https://root.cern/download/"$ROOTDIST 
          wget https://root.cern/download/$ROOTDIST 
          tar -xzf $ROOTDIST 
          source root/bin/thisroot.sh

          # install and set up lcov
          wget http://downloads.sourceforge.net/ltp/lcov-1.14.tar.gz
          tar -zxvf lcov-1.14.tar.gz
          cd lcov-1.14
          sudo make install
          cd ../
          lcov --directory ./ --zerocounters

          # give self permission to run scripts
          sudo chmod 777 tests/test_realizeCascades.sh
          sudo chmod 777 get_checksums.sh

          # set up build dir
          mkdir ~/build/nrCascadeSim_build
          cd ~/build/nrCascadeSim_build
    
      - run:
        name: Test
        command: |
          #make repository code (my code)
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DUSE_GCOV=ON ~/build/villano-lab/nrCascadeSim
          make
          sudo make install
          make tests
          # Send tests to directory they were written to run from.
          mv readLevelfile ~/build/villano-lab/nrCascadeSim/tests/bin
          mv realizeAndSave ~/build/villano-lab/nrCascadeSim/tests/bin
          mv printIsotopeInfo ~/build/villano-lab/nrCascadeSim/tests/bin
          mv fetchYieldModel ~/build/villano-lab/nrCascadeSim/tests/bin
          cd ~/build/villano-lab/nrCascadeSim/

          # activate conda environment
          source activate piptest

          # test help functions
          realizeCascades --help
          regexPlayground --help

          #do the tests
          cd tests
          ./test_realizeCascades.sh
          bash test_examples.sh
          regexPlayground
          realizeCascades -n 1 -o "verbosetest.root" ../levelfiles/allge_ngam_WSlow.txt

          #need conda environment
          cd ../example-usecase
          travis_wait 50 py.test

          #Upload coverage before relevant data is removed.
          cd ~/build/villano-lab/nrCascadeSim
          if [ "$UPLOAD_COVERAGE" == "true" ]; then source ~/build/villano-lab/nrCascadeSim/.github/uploadtocodecov.sh; fi

          #clean up
          cd ~/build/nrCascadeSim_build
          make clean
          sudo make uninstall